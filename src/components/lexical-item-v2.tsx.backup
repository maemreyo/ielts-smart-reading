import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from "@/components/ui/dialog";
import {
    TooltipProvider,
} from "@/components/ui/tooltip";
import { Button } from "@/components/ui/button";
import {
    BookText,
    Wand2,
    Brain,
    Eye,
    ArrowRight,
    Volume2,
    Sparkles,
    CheckCircle2,
    Lightbulb,
    Pencil,
    X
} from "lucide-react";
import { cn } from "@/lib/utils";
import { PhoneticZoom } from "./phonetic-zoom";
import { useGuessStore } from "./reading/hooks/useGuessStore";
import { useSpeech } from "@/hooks/use-speech";
import { type LexicalItem, type LegacyLexicalItem, isLegacyLexicalItem, isCollocateArray, isUsageNoteArray, isConnotationArray, type CollocateObject, type UsageNoteObject, type ConnotationObject } from "@/types/lexical";

interface LexicalItemProps {
    item: LexicalItem | LegacyLexicalItem;
    children: React.ReactNode;
    hideTranslation?: boolean;
    guessMode?: boolean;
    theme?: "light" | "sepia" | "dark";
}

export function LexicalItem({
    item,
    children,
    hideTranslation = false,
    guessMode = false,
    theme = "sepia"
}: LexicalItemProps) {
    const [open, setOpen] = useState(false);
    const [revealLevel, setRevealLevel] = useState(0);
    const [usageNotesLanguage, setUsageNotesLanguage] = useState<'en' | 'vi'>('en');
    const [connotationLanguage, setConnotationLanguage] = useState<'en' | 'vi'>('en');
    const { getGuess, setGuess } = useGuessStore();
    const { isSpeaking, speak } = useSpeech({ rate: 0.8 });

    // Helper functions
    const getItemId = (item: LexicalItem | LegacyLexicalItem): string => {
        return isLegacyLexicalItem(item) ? String(item.id) : item.id;
    };

    const hasWordForms = (wordForms?: any): boolean => {
        if (!wordForms) return false;
        return Object.values(wordForms).some(forms =>
            Array.isArray(forms) && forms.length > 0
        );
    };

    const hasUsageNotes = (notes?: any[]): boolean => {
        return Array.isArray(notes) && notes.length > 0;
    };

    const normalizeCollocates = (collocates?: CollocateObject[] | string[] | string): CollocateObject[] => {
        if (!collocates) return [];
        if (typeof collocates === 'string') return [{ form: collocates, meaning: '' }];
        if (isCollocateArray(collocates)) {
            return collocates;
        }
        // Handle string array by converting to objects
        if (Array.isArray(collocates) && collocates.length > 0 && typeof collocates[0] === 'string') {
            return (collocates as string[]).map(form => ({ form, meaning: '' }));
        }
        return [];
    };

    const normalizeUsageNotes = (notes?: UsageNoteObject[] | string): UsageNoteObject[] => {
        if (!notes) return [];
        if (typeof notes === 'string') return [{ noteEN: notes, noteVI: '' }];
        if (isUsageNoteArray(notes)) {
            return notes;
        }
        return [{ noteEN: String(notes), noteVI: '' }];
    };

    const normalizeConnotation = (connotation?: ConnotationObject[] | string | null): ConnotationObject[] => {
        if (!connotation) return [];
        if (typeof connotation === 'string') return [{ noteEN: connotation, noteVI: '' }];
        if (isConnotationArray(connotation)) {
            return connotation.map(c => ({
                noteEN: c.noteEN || c.connotationEN || '',
                noteVI: c.noteVI || c.connotationVI || '',
                connotationEN: c.connotationEN,
                connotationVI: c.connotationVI
            }));
        }
        return [];
    };

    // Extract data
    const {
        targetLexeme,
        phase1Inference,
        phase2Annotation,
        phase3Production,
    } = item;

    const phonetic = (phase2Annotation as any).phonetic;
    const sentiment = (phase2Annotation as any).sentiment;
    const definitionEN = (phase2Annotation as any).definitionEN;
    const translationVI = (phase2Annotation as any).translationVI;
    const relatedCollocates = normalizeCollocates((phase2Annotation as any).relatedCollocates);
    const wordForms = (phase2Annotation as any).wordForms;
    const register = (phase2Annotation as any).register;
    const connotation = normalizeConnotation((phase2Annotation as any).connotation);
    const usageNotes = normalizeUsageNotes((phase2Annotation as any).usageNotes);
    const contrastingCollocates = normalizeCollocates((phase2Annotation as any).contrastingCollocates);

    const itemId = getItemId(item);
    const formattedTranslation = translationVI.charAt(0).toLowerCase() + translationVI.slice(1);

    const speakText = (text: string, rate?: number) => {
        speak({ text, lang: 'en-US', rate: rate || 0.8 });
    };


    // Theme classes
    const themeClasses = {
        sepia: {
            bg: "bg-amber-50",
            text: "text-amber-950",
            border: "border-amber-200",
            headerBg: "bg-gradient-to-br from-amber-100 to-orange-100",
            cardBg: "bg-amber-50/50",
            muted: "text-amber-700",
        },
        light: {
            bg: "bg-white",
            text: "text-slate-900",
            border: "border-slate-200",
            headerBg: "bg-gradient-to-br from-slate-50 to-slate-100",
            cardBg: "bg-slate-50/50",
            muted: "text-slate-600",
        },
        dark: {
            bg: "bg-slate-900",
            text: "text-slate-100",
            border: "border-slate-700",
            headerBg: "bg-gradient-to-br from-slate-800 to-slate-900",
            cardBg: "bg-slate-800/50",
            muted: "text-slate-400",
        },
    }[theme];

    // Reset state when dialog closes
    useEffect(() => {
        if (!open) {
            setRevealLevel(0);
        }
    }, [open]);

    return (
        <TooltipProvider>
            <Dialog open={open} onOpenChange={setOpen}>
                <DialogTrigger asChild>
                    <span
                        className={cn(
                            "underline decoration-dotted cursor-pointer hover:decoration-solid transition-all",
                            sentiment === "positive" && "decoration-emerald-400 hover:bg-emerald-50 dark:hover:bg-emerald-900/20",
                            sentiment === "negative" && "decoration-rose-400 hover:bg-rose-50 dark:hover:bg-rose-900/20",
                            sentiment === "neutral" && "decoration-slate-400 hover:bg-slate-50 dark:hover:bg-slate-800/20"
                        )}
                    >
                        <strong className="font-semibold">{children}</strong>
                        {!hideTranslation && (
                            <em className="text-muted-foreground text-sm ml-1">({formattedTranslation})</em>
                        )}
                    </span>
                </DialogTrigger>

                <DialogContent
                    size="4xl"
                    className={cn(
                        "max-h-[95vh] sm:max-h-[85vh] overflow-hidden p-0",
                        themeClasses.bg,
                        themeClasses.text
                    )}
                >
                    {/* Enhanced Header with Definitions */}
                    <DialogHeader className={cn(
                        "px-3 sm:px-8 pt-3 sm:pt-6 pb-2 sm:pb-4 pr-16 sm:pr-16 border-b",
                        themeClasses.headerBg,
                        themeClasses.border
                    )}>
                        <div className="space-y-3">
                            {/* Title Row with Definitions */}
                            <div className="space-y-2">
                                {/* Main Title with Word and Audio */}
                                <div className="flex flex-col gap-2">
                                    {/* Title alone */}
                                    <DialogTitle className="text-3xl sm:text-4xl font-bold break-words text-left">
                                        {targetLexeme}
                                    </DialogTitle>

                                    {/* Phonetic, Register and Audio on same line on mobile */}
                                    <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4">
                                        {phonetic && (
                                            <PhoneticZoom
                                                text={phonetic}
                                                className={cn("text-sm italic text-left", themeClasses.muted)}
                                            />
                                        )}
                                        <div className="flex items-center gap-2">
                                            {register && (
                                                <span className={cn(
                                                    "text-xs px-2.5 py-1 rounded-full border font-normal",
                                                    register === "formal"
                                                        ? "bg-blue-100 text-blue-700 border-blue-300 dark:bg-blue-900/30 dark:text-blue-400 dark:border-blue-700"
                                                        : register === "informal"
                                                            ? "bg-green-100 text-green-700 border-green-300 dark:bg-green-900/30 dark:text-green-400 dark:border-green-700"
                                                            : "bg-slate-100 text-slate-700 border-slate-300 dark:bg-slate-700/30 dark:text-slate-400 dark:border-slate-600"
                                                )}>
                                                    üìù {register}
                                                </span>
                                            )}
                                            <Button
                                                size="sm"
                                                variant="outline"
                                                onClick={() => speakText(targetLexeme)}
                                                disabled={isSpeaking}
                                                className="hover:bg-amber-100 dark:hover:bg-amber-900/30 flex-shrink-0"
                                            >
                                                <Volume2 className={cn("h-4 w-4", isSpeaking && "animate-pulse")} />
                                            </Button>
                                        </div>
                                    </div>
                                </div>

                                {/* Definitions Right Next to Word */}
                                <div className="flex flex-col sm:flex-row gap-4 pl-1">
                                    <div className="flex items-center gap-2 flex-1">
                                        <BookText className="hidden sm:block h-4 w-4 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0" />
                                        <div className="flex-1">
                                            <p className="text-sm leading-relaxed text-blue-700 dark:text-blue-300 font-medium text-left">{definitionEN}</p>
                                        </div>
                                    </div>
                                    <div className="flex items-center gap-2 flex-1">
                                        <Eye className="hidden sm:block h-4 w-4 text-orange-600 dark:text-orange-400 mt-0.5 flex-shrink-0" />
                                        <div className="flex-1">
                                            <p className="text-sm font-semibold text-orange-700 dark:text-orange-400 text-left">{formattedTranslation}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </DialogHeader>

                    {/* Main Content */}
                    <div className="overflow-y-auto max-h-[calc(95vh-160px)] sm:max-h-[calc(85vh-180px)] px-3 sm:px-5 py-3 sm:py-4">
                        {guessMode ? (
                            /* Guess Mode Content */
                            <div className="space-y-4 sm:space-y-6">
                                {/* Progress Stepper */}
                                <div className="flex items-center justify-between mb-2">
                                    {[
                                        { level: 0, label: "Guess", icon: Brain },
                                        { level: 1, label: "Check", icon: BookText },
                                        { level: 2, label: "Reveal", icon: Eye },
                                    ].map(({ level, label, icon: Icon }, idx) => (
                                        <div key={level} className="flex flex-col items-center flex-1">
                                            <div className={cn(
                                                "w-10 h-10 rounded-full flex items-center justify-center mb-2 transition-all",
                                                revealLevel >= level
                                                    ? "bg-green-500 text-white shadow-lg scale-110"
                                                    : theme === "sepia"
                                                        ? "bg-amber-200 text-amber-600"
                                                        : theme === "light"
                                                            ? "bg-slate-200 text-slate-500"
                                                            : "bg-slate-700 text-slate-400"
                                            )}>
                                                {revealLevel > level ? (
                                                    <CheckCircle2 className="h-5 w-5" />
                                                ) : (
                                                    <Icon className="h-5 w-5" />
                                                )}
                                            </div>
                                            <span className={cn(
                                                "text-xs font-medium",
                                                revealLevel >= level ? "text-green-600 dark:text-green-400" : themeClasses.muted
                                            )}>
                                                {label}
                                            </span>
                                            {idx < 2 && (
                                                <div className={cn(
                                                    "h-1 w-full mt-2 rounded-full transition-all",
                                                    revealLevel > level
                                                        ? "bg-green-500"
                                                        : theme === "sepia"
                                                            ? "bg-amber-200"
                                                            : theme === "light"
                                                                ? "bg-slate-200"
                                                                : "bg-slate-700"
                                                )} />
                                            )}
                                        </div>
                                    ))}
                                </div>

                                {/* Guess Input */}
                                {revealLevel === 0 && (
                                    <div className={cn(
                                        "rounded-xl p-6 border-2",
                                        theme === "sepia"
                                            ? "bg-amber-100 border-amber-300"
                                            : theme === "light"
                                                ? "bg-blue-50 border-blue-300"
                                                : "bg-slate-800 border-slate-600"
                                    )}>
                                        <div className="flex items-center gap-2 mb-2 md:mb-3">
                                            <Brain className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                                            <h3 className="font-bold text-lg">What's your guess?</h3>
                                        </div>
                                        <input
                                            type="text"
                                            value={getGuess(itemId)}
                                            onChange={(e) => setGuess(itemId, e.target.value)}
                                            placeholder="Type your guess here..."
                                            className={cn(
                                                "w-full p-4 text-lg border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent",
                                                theme === "sepia"
                                                    ? "bg-white border-amber-300"
                                                    : theme === "light"
                                                        ? "bg-white border-blue-200"
                                                        : "bg-slate-900 border-slate-600 text-white"
                                            )}
                                            autoFocus
                                        />
                                    </div>
                                )}

                                {/* Show Guesses Comparison */}
                                {revealLevel > 0 && (
                                    <div className="space-y-4">
                                        <div className={cn(
                                            "rounded-xl p-2 sm:p-4 border",
                                            theme === "sepia"
                                                ? "bg-amber-100 border-amber-300"
                                                : theme === "light"
                                                    ? "bg-blue-50 border-blue-200"
                                                    : "bg-slate-800 border-slate-700"
                                        )}>
                                            <div className="flex items-center gap-2 mb-2 md:mb-3">
                                                <Brain className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                                                <h4 className="font-semibold">Your Guess</h4>
                                            </div>
                                            <p className="text-base">
                                                {getGuess(itemId) || <em className={themeClasses.muted}>(No guess entered)</em>}
                                            </p>
                                        </div>

                                        {phase1Inference?.contextualGuessVI && (
                                            <div className={cn(
                                                "rounded-xl p-2 sm:p-4 border",
                                                theme === "sepia"
                                                    ? "bg-yellow-50 border-yellow-300"
                                                    : theme === "light"
                                                        ? "bg-yellow-50 border-yellow-200"
                                                        : "bg-yellow-900/20 border-yellow-800"
                                            )}>
                                                <div className="flex items-center gap-2 mb-2 md:mb-3">
                                                    <Lightbulb className="h-5 w-5 text-yellow-600 dark:text-yellow-400" />
                                                    <h4 className="font-semibold text-yellow-900 dark:text-yellow-300">Suggested Guess</h4>
                                                </div>
                                                <p className="text-base text-yellow-900 dark:text-yellow-200">
                                                    {phase1Inference.contextualGuessVI}
                                                </p>
                                            </div>
                                        )}
                                    </div>
                                )}

                                {/* Action Buttons */}
                                <div className="flex gap-3 pt-4">
                                    {revealLevel < 2 ? (
                                        <Button
                                            onClick={() => setRevealLevel(revealLevel + 1)}
                                            className="flex-1 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white py-6 text-lg font-semibold"
                                        >
                                            <ArrowRight className="h-5 w-5 mr-2" />
                                            {revealLevel === 0 ? "Check Answer" : "Show Full Answer"}
                                        </Button>
                                    ) : (
                                        <Button
                                            onClick={() => setRevealLevel(0)}
                                            variant="outline"
                                            className="flex-1 py-6 text-lg font-semibold"
                                        >
                                            <Brain className="h-5 w-5 mr-2" />
                                            Try Again
                                        </Button>
                                    )}
                                </div>
                            </div>
                        ) : (
                            /* Normal Mode Content */
                            <div className="space-y-3 sm:space-y-4">
                                {/* Word Family - Linear Layout */}
                                {(wordForms && hasWordForms(wordForms)) || phase1Inference?.contextualGuessVI ? (
                                    <div className={cn(
                                        "rounded-xl p-2 sm:p-4 border",
                                        theme === "sepia"
                                            ? "bg-purple-50 border-purple-200"
                                            : theme === "light"
                                                ? "bg-purple-50 border-purple-200"
                                                : "bg-purple-950/30 border-purple-800"
                                    )}>
                                        <div className="flex items-center gap-2 mb-2 md:mb-3">
                                            <Wand2 className="h-5 w-5 text-purple-600 dark:text-purple-400" />
                                            <h3 className="font-semibold text-purple-900 dark:text-purple-300">Word Family</h3>
                                        </div>
                                        <div className="space-y-4">
                                            {/* Contextual Guess */}
                                            {phase1Inference?.contextualGuessVI && (
                                                <div className="space-y-2">
                                                    <div className="flex items-center gap-2">
                                                        <span className="text-sm font-bold text-purple-700 dark:text-purple-400 uppercase">
                                                            Contextual Guess
                                                        </span>
                                                        <div className="h-px bg-purple-300 dark:bg-purple-600 flex-1"></div>
                                                    </div>
                                                    <p className="text-sm text-purple-900 dark:text-purple-200 italic">
                                                        "{phase1Inference.contextualGuessVI}"
                                                    </p>
                                                </div>
                                            )}

                                            {/* Word Forms as Horizontal Row */}
                                            <div className="flex flex-wrap gap-4 items-start">
                                                {Object.entries(wordForms).map(([type, forms]) =>
                                                    forms && (forms as any[]).length > 0 && (
                                                        <div key={type} className="flex-1 min-w-[200px]">
                                                            <div className="flex items-center gap-2 mb-2">
                                                                <span className="text-sm font-bold text-purple-700 dark:text-purple-400 uppercase">
                                                                    {type}
                                                                </span>
                                                                <div className="h-px bg-purple-300 dark:bg-purple-600 flex-1"></div>
                                                            </div>
                                                            {/* Multiple forms as column within this word type */}
                                                            <div className="space-y-1">
                                                                {(forms as any[]).map((form, idx) => (
                                                                    <div key={idx} className="text-sm text-purple-900 dark:text-purple-200">
                                                                        <span className="font-medium">{form.form}</span>
                                                                        <span className={cn("ml-1", themeClasses.muted)}>({form.meaning})</span>
                                                                    </div>
                                                                ))}
                                                            </div>
                                                        </div>
                                                    )
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                )}

                                {/* Collocations - Horizontal Row Layout */}
                                {(relatedCollocates.length > 0 || contrastingCollocates.length > 0) && (
                                    <div className={cn(
                                        "rounded-xl p-2 sm:p-4 border",
                                        theme === "sepia"
                                            ? "bg-sky-50 border-sky-200"
                                            : theme === "light"
                                                ? "bg-sky-50 border-sky-200"
                                                : "bg-sky-950/30 border-sky-800"
                                    )}>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            {/* Related Collocations */}
                                            {relatedCollocates.length > 0 && (
                                                <div className="space-y-2">
                                                    <div className="flex items-center gap-2">
                                                        <span className="text-sm font-bold text-sky-700 dark:text-sky-400 uppercase">
                                                            Related Collocations
                                                        </span>
                                                        <div className="h-px bg-sky-300 dark:bg-sky-600 flex-1"></div>
                                                    </div>
                                                    <div className="space-y-2">
                                                        {relatedCollocates.map((collocate, idx) => (
                                                            <div key={idx} className="space-y-1">
                                                                <div className="flex items-center justify-between">
                                                                    <span className="text-sm text-sky-900 dark:text-sky-200 font-medium">
                                                                        {collocate.form}
                                                                    </span>
                                                                    <button
                                                                        onClick={() => speakText(collocate.form)}
                                                                        className="group p-1.5 bg-sky-100 dark:bg-sky-800/50 hover:bg-sky-200 dark:hover:bg-sky-700 rounded-lg transition-all"
                                                                    >
                                                                        <Volume2 className="h-3 w-3 text-sky-700 dark:text-sky-300" />
                                                                    </button>
                                                                </div>
                                                                {collocate.meaning && (
                                                                    <p className="text-xs text-sky-700 dark:text-sky-300 italic ml-16">
                                                                        {collocate.meaning}
                                                                    </p>
                                                                )}
                                                            </div>
                                                        ))}
                                                    </div>
                                                </div>
                                            )}

                                            {/* Contrasting Collocations */}
                                            {contrastingCollocates.length > 0 && (
                                                <div className="space-y-2">
                                                    <div className="flex items-center gap-2">
                                                        <span className="text-sm font-bold text-sky-700 dark:text-sky-400 uppercase">
                                                            Contrasting Collocations
                                                        </span>
                                                        <div className="h-px bg-sky-300 dark:bg-sky-600 flex-1"></div>
                                                    </div>
                                                    <div className="space-y-2">
                                                        {contrastingCollocates.map((collocate, idx) => (
                                                            <div key={idx} className="space-y-1">
                                                                <div className="flex items-center justify-between">
                                                                    <span className="text-sm text-sky-900 dark:text-sky-200 font-medium">
                                                                        {collocate.form}
                                                                    </span>
                                                                    <button
                                                                        onClick={() => speakText(collocate.form)}
                                                                        className="group p-1.5 bg-sky-100 dark:bg-sky-800/50 hover:bg-sky-200 dark:hover:bg-sky-700 rounded-lg transition-all"
                                                                    >
                                                                        <Volume2 className="h-3 w-3 text-sky-700 dark:text-sky-300" />
                                                                    </button>
                                                                </div>
                                                                {collocate.meaning && (
                                                                    <p className="text-xs text-sky-700 dark:text-sky-300 italic ml-16">
                                                                        {collocate.meaning}
                                                                    </p>
                                                                )}
                                                            </div>
                                                        ))}
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}

                                {/* Usage Notes and Connotation - 2 Columns */}
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    {/* Usage Notes */}
                                    {usageNotes && hasUsageNotes(usageNotes) && (
                                        <div className={cn(
                                            "rounded-xl p-2 sm:p-4 border",
                                            theme === "sepia"
                                                ? "bg-emerald-50 border-emerald-200"
                                                : theme === "light"
                                                    ? "bg-emerald-50 border-emerald-200"
                                                    : "bg-emerald-950/30 border-emerald-800"
                                        )}>
                                            <div className="flex items-center justify-between mb-2 md:mb-3">
                                                <div className="flex items-center gap-2">
                                                    <Lightbulb className="h-5 w-5 text-emerald-600 dark:text-emerald-400" />
                                                    <h3 className="font-semibold text-emerald-900 dark:text-emerald-300">
                                                        Usage Notes
                                                        {usageNotes.length > 1 && (
                                                            <span className="ml-2 text-xs bg-emerald-200 dark:bg-emerald-800 text-emerald-800 dark:text-emerald-200 px-2 py-0.5 rounded-full">
                                                                {usageNotes.length}
                                                            </span>
                                                        )}
                                                    </h3>
                                                </div>
                                                <motion.button
                                                    whileHover={{ scale: 1.05 }}
                                                    whileTap={{ scale: 0.95, rotate: 180 }}
                                                    onClick={() => setUsageNotesLanguage(usageNotesLanguage === 'en' ? 'vi' : 'en')}
                                                    className={cn(
                                                        "p-2 rounded-lg transition-colors h-[32px] w-[32px] flex items-center justify-center",
                                                        usageNotesLanguage === 'vi'
                                                            ? "bg-emerald-600 text-white"
                                                            : "bg-emerald-100 text-emerald-700 hover:bg-emerald-200"
                                                    )}
                                                    title={`Usage Notes: ${usageNotesLanguage === 'en' ? 'English' : 'Ti·∫øng Vi·ªát'} - Click to switch`}
                                                >
                                                    <div className="flex flex-col items-center gap-0.5">
                                                        <span className="text-xs font-medium">
                                                            {usageNotesLanguage === 'en' ? 'EN' : 'VI'}
                                                        </span>
                                                        <div className="w-1 h-1 bg-current rounded-full opacity-50"></div>
                                                    </div>
                                                </motion.button>
                                            </div>
                                            <div className="space-y-2">
                                                {usageNotes.map((note, idx) => (
                                                    <p key={idx} className="text-sm leading-relaxed text-emerald-900 dark:text-emerald-200">
                                                        {usageNotesLanguage === 'en' ? note.noteEN : note.noteVI}
                                                    </p>
                                                ))}
                                            </div>
                                        </div>
                                    )}

                                    {/* Connotation */}
                                    {connotation && (
                                        <div className={cn(
                                            "rounded-xl p-2 sm:p-4 border",
                                            theme === "sepia"
                                                ? "bg-indigo-50 border-indigo-200"
                                                : theme === "light"
                                                    ? "bg-indigo-50 border-indigo-200"
                                                    : "bg-indigo-950/30 border-indigo-800"
                                        )}>
                                            <div className="flex items-center justify-between mb-2 md:mb-3">
                                                <div className="flex items-center gap-2">
                                                    <Sparkles className="h-5 w-5 text-indigo-600 dark:text-indigo-400" />
                                                    <h3 className="font-semibold text-indigo-900 dark:text-indigo-300">Connotation</h3>
                                                </div>
                                                <motion.button
                                                    whileHover={{ scale: 1.05 }}
                                                    whileTap={{ scale: 0.95, rotate: 180 }}
                                                    onClick={() => setConnotationLanguage(connotationLanguage === 'en' ? 'vi' : 'en')}
                                                    className={cn(
                                                        "p-2 rounded-lg transition-colors h-[32px] w-[32px] flex items-center justify-center",
                                                        connotationLanguage === 'vi'
                                                            ? "bg-indigo-600 text-white"
                                                            : "bg-indigo-100 text-indigo-700 hover:bg-indigo-200"
                                                    )}
                                                    title={`Connotation: ${connotationLanguage === 'en' ? 'English' : 'Ti·∫øng Vi·ªát'} - Click to switch`}
                                                >
                                                    <div className="flex flex-col items-center gap-0.5">
                                                        <span className="text-xs font-medium">
                                                            {connotationLanguage === 'en' ? 'EN' : 'VI'}
                                                        </span>
                                                        <div className="w-1 h-1 bg-current rounded-full opacity-50"></div>
                                                    </div>
                                                </motion.button>
                                            </div>
                                            {connotation.map((note, index) => (
                                                <p key={index} className="text-sm leading-relaxed text-indigo-900 dark:text-indigo-200">
                                                    {connotationLanguage === 'en' ? note.noteEN : note.noteVI}
                                                </p>
                                            ))}
                                        </div>
                                    )}

                                    {/* Practice Examples */}
                                    {phase3Production && (
                                        <div className={cn(
                                            "rounded-xl p-2 sm:p-4 border",
                                            theme === "sepia"
                                                ? "bg-purple-50 border-purple-200"
                                                : theme === "light"
                                                    ? "bg-purple-50 border-purple-200"
                                                    : "bg-purple-950/30 border-purple-800"
                                        )}>
                                            <div className="flex items-center gap-2 mb-2 md:mb-3">
                                                <Pencil className="h-5 w-5 text-purple-600 dark:text-purple-400" />
                                                <h3 className="font-semibold text-purple-900 dark:text-purple-300">
                                                    Example
                                                </h3>
                                                {phase3Production.taskType && (
                                                    <span className="text-xs bg-purple-200 dark:bg-purple-800 text-purple-800 dark:text-purple-200 px-2 py-1 rounded-full capitalize">
                                                        {phase3Production.taskType.replace(/_/g, " ").toLowerCase()}
                                                    </span>
                                                )}
                                            </div>
                                            <p className="text-sm leading-relaxed text-purple-900 dark:text-purple-200 italic">
                                                "{phase3Production.content}"
                                            </p>
                                        </div>
                                    )}
                                </div>
                            </div>
                        )}

                        {/* Mobile Close Button */}
                        <div className="sm:hidden flex justify-center py-4 border-t mt-4">
                            <Button
                                onClick={() => setOpen(false)}
                                variant="outline"
                                className="w-full max-w-xs py-3 text-base font-medium border-2 hover:bg-gray-50 dark:hover:bg-gray-800"
                            >
                                <X className="h-4 w-4 mr-2" />
                                Close
                            </Button>
                        </div>
                    </div>
                </DialogContent>
            </Dialog>
        </TooltipProvider>
    );
}